@page "/InscripcionesComponent/{Id:int}"

@using _1erParcial_Aplicada2.Controllers;
@using _1erParcial_Aplicada2.Models;

<style>
    *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }


    .form-register {
        width: 800px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        padding: 30px;
        margin: auto;
        margin-top: 100px;
        border-radius: 4px;
        font-family: 'calibri';
        color: white;
        box-shadow: 7px 13px 37px #000;
    }

    .h3{
        color :white;
    }

</style>

<div>
    <section class="form-register">
        <EditForm Model="@inscripciones" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <h3>Inscripciones Component</h3>

            <div class="form-group">
                <label for="inscripcionid_number">InscripciónId</label>
                <InputNumber id="inscripcionid_number" class="form-control" @bind-Value="inscripciones.InscripcionId"></InputNumber>
                <ValidationMessage For="(() => inscripciones.InscripcionId)" />
                <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
            </div>
            <div class="form-group">
                <label for="fecha_date">Fecha</label>
                <InputDate id="fecha_date" class="form-control" @bind-Value="inscripciones.Fecha"></InputDate>
                <ValidationMessage For="(() => inscripciones.Fecha)" />
            </div>
            <div class="form-group">
                <label for="semestre_text">Semestre</label>
                <InputText id="semestre_text" class="form-control" @bind-Value="inscripciones.Semestre"></InputText>
                <ValidationMessage For="(() => inscripciones.Semestre)" />
            </div>
            <div class="form-group">
                <label for="estudianteid_number">EstudianteId</label>
                <InputNumber id="estudianteid_number" class="form-control" @bind-Value="inscripciones.EstudianteId"></InputNumber>
                <ValidationMessage For="(() => inscripciones.EstudianteId)" />
            </div>

            <div class="row">
                <div class="col">
                    <label for="materia">Materia</label>
                    <InputSelect @bind-Value ="@Seleccionado" @onchange="CargarAsignatura" @onclick="CargarAsignatura" class="form-control">
                        @foreach (var item in MiLista)
                        {
                            <option value="@item.AsignaturaId">@item.Descripcion</option>
                        }
                    </InputSelect>
                    <button type="button" class="btn btn-outline-info" @onclick="AgregarAsignatura">Agregar</button>
                </div>
                <div class="col">
                    <label for="creditos">Creditos</label>
                    <InputNumber id="creditos" class="form-control" @bind-Value="Asignatura.Creditos" ReadOnly="true"></InputNumber>
                </div>
            </div>

            <br />

            <div>
                <table class="table">
                    <thead class="thead-dark">
                        <tr>
                            <th>Id</th>
                            <th>InscripcionId</th>
                            <th>AsignaturaId</th>
                            <th>Nombre</th>
                            <th>Creditos</th>
                            <th>SubTotal</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody class="bg-white">
                        @foreach (var item in inscripciones.Detalle)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <th>@item.InscripcionId</th>
                                <td>@item.AsignaturaId</td>
                                <td>@item.Nombre</td>
                                <td>@item.Creditos</td>
                                <td>@item.SubTotal</td>
                                <td><button type="button" class="btn btn-outline-danger" @onclick="(()=> EliminarAsigantura(item))">Eliminar</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-group">
                <label for="limite_number"> Limite</label>
                <InputNumber id="limite_number" class="form-control" @onfocusin="CalculoCreditos" @onfocusout="CalculoCreditos" @bind-Value="inscripciones.Limite"></InputNumber>
                <ValidationMessage For="(() => inscripciones.Limite)" />
            </div>
            <div class="form-group">
                <label for="tomados_number">Tomados</label>
                <InputNumber id="tomados_number" class="form-control" @onfocusin="CalculoCreditos" @onfocusout="CalculoCreditos" @bind-Value="inscripciones.Tomados"></InputNumber>
                <ValidationMessage For="(() => inscripciones.Tomados)" />
            </div>
            <div class="form-group">
                <label for="disponibles_number">Disponibles</label>
                <InputNumber id="disponibles_number" class="form-control" @bind-Value="inscripciones.Disponibles" ReadOnly="true"></InputNumber>
                <ValidationMessage For="(() => inscripciones.Disponibles)" />
            </div>
            <div class="form-group">
                <label for="monto_number">Monto</label>
                <InputNumber id="monto_number" class="form-control" @bind-Value="inscripciones.Monto"></InputNumber>
                <ValidationMessage For="(() => inscripciones.Monto)" />
            </div>
            <div class="form-group">
                <label for="balance_number">Balance</label>
                <InputNumber id="balance_number" class="form-control" @bind-Value="inscripciones.Balance" ReadOnly="true"></InputNumber>
                <ValidationMessage For="(() => inscripciones.Balance)" />
            </div>

            <h5 class="text-muted form-text">@Mensaje</h5>
            <div>
                <button type="button" class="btn btn-danger" @onclick="Limpiar">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="Eliminar">Eliminar</button>
            </div>
        </EditForm>
    </section>
    <br />
    <br />
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    public string Mensaje { get; set; }
    public string Seleccionado { get; set; }


    public Asignaturas Asignatura { get; set; }
    List<Asignaturas> MiLista = new List<Asignaturas>();
    protected override async Task OnInitializedAsync()
    {
        InscripcionesController controller = new InscripcionesController();
        Limpiar();
        Mensaje = string.Empty;
        if(Id != 0)
        {
            inscripciones = controller.Buscar(Id);
        }
        AsignaturasController controller2 = new AsignaturasController();
        MiLista = controller2.GetList(A => true);

        Asignatura = new Asignaturas();
    }

    private void EliminarAsigantura(InscripcionesDetalle asignatura)
    {
        inscripciones.Detalle.Remove(asignatura);
    }

    private void CargarAsignatura()
    {
        try
        {
            AsignaturasController controller = new AsignaturasController();
            Asignatura = controller.Buscar(Int32.Parse(Seleccionado));
        }
        catch (Exception)
        {

            //wefrbrvr
        }
    }

    private void AgregarAsignatura()
    {
        if (inscripciones.Detalle.Any(A => A.AsignaturaId == Asignatura.AsignaturaId))
        {
            Mensaje = "Esta asignatura ya esta agregada";
        }
        else
        {
            inscripciones.Detalle.Add(new InscripcionesDetalle()
            {
                InscripcionId = inscripciones.InscripcionId,
                AsignaturaId = Asignatura.AsignaturaId,
                Nombre = Asignatura.Descripcion,
                Creditos = Asignatura.Creditos,
                SubTotal = Asignatura.Creditos * inscripciones.Monto
            });
        }

    }

    Inscripciones inscripciones = new Inscripciones();

    private void Limpiar()
    {
        Mensaje = string.Empty;
        inscripciones = new Inscripciones();
    }

    private void CalculoCreditos()
    {
        inscripciones.Disponibles = inscripciones.Limite - inscripciones.Tomados;
    }

    private void Guardar()
    {
        InscripcionesController controller = new InscripcionesController();

        EstudianteController con = new EstudianteController();
        Estudiantes tempEstudiante = con.Buscar(inscripciones.EstudianteId);
        if(tempEstudiante == null)
        {
            inscripciones.EstudianteId = -1;
            return;
        }

        if(inscripciones.InscripcionId > 0)
        {
            if (controller.Guardar(inscripciones))
            {
                Mensaje = "Se modifico correctamente";
                inscripciones = new Inscripciones();
            }
            else
            {
                Mensaje = "No se pudo modificar";
            }
        }
        else
        {
            if (controller.Guardar(inscripciones))
            {
                Mensaje = "Se guardo correctamente";
                inscripciones = new Inscripciones();
            }
            else
            {
                Mensaje = "No se pudo guardar";
            }
        }
    }

    private void Buscar()
    {
        InscripcionesController controller = new InscripcionesController();
        Inscripciones ins = controller.Buscar(inscripciones.InscripcionId);

        if(ins != null)
        {
            inscripciones = ins;
            Mensaje = "Se encontro la inscripción";
        }
        else
        {
            Mensaje = "Esta inscripción no existe";
        }
    }

    private void Eliminar()
    {
        InscripcionesController controller = new InscripcionesController();

        bool paso = controller.Eliminar(inscripciones.InscripcionId);

        if(paso == true)
        {
            Mensaje = "La inscripción se elimino";
            inscripciones = new Inscripciones();
        }
        else
        {
            Mensaje = "No se puede eliminar una inscripción que no existe";
        }
    }



}
